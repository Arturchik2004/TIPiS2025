"""
–ü—Ä–æ—Å—Ç–µ–π—à–∏–π Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç —á–µ—Ä–µ–∑ OpenRouter
"""

import asyncio
import os
import tempfile
from pathlib import Path
import re

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from dotenv import load_dotenv
from openai import OpenAI

from file_utils import extract_docx, extract_pdf, extract_txt
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup





# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")



PROMPT_TEMPLATE = """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –æ—Ü–µ–Ω–∫—É.
–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò (100 –±–∞–ª–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º):
1. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ —Ä–µ—à–µ–Ω–∏—è (0-30 –±–∞–ª–ª–æ–≤)
2. –ü–æ–ª–Ω–æ—Ç–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (0-30 –±–∞–ª–ª–æ–≤)
3. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (0-20 –±–∞–ª–ª–æ–≤)
4. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç—ã (0-20 –±–∞–ª–ª–æ–≤)
–î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É:
- –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ä–∞–±–æ—Ç–∞
- –û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
- –£–∫–∞–∂–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
- –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
- –ü–æ—Å—Ç–∞–≤—å –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∏–∑ 100 –±–∞–ª–ª–æ–≤

–ë—É–¥—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤, –Ω–æ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª–µ–Ω. –ü–∏—à–∏ –ø–æ–Ω—è—Ç–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞.
–°—Ç–∏–ª—å: —Å–∂–∞—Ç—ã–π, –¥–µ–ª–æ–≤–æ–π, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤

"""




class PromptUpdate(StatesGroup):
    waiting_for_prompt = State()

class ParamsUpdate(StatesGroup):
    waiting_for_params = State()

if not BOT_TOKEN or not OPENROUTER_KEY:
    print("–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(
    token=BOT_TOKEN, 
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# OpenRouter –∫–ª–∏–µ–Ω—Ç
openrouter = OpenAI(
    api_key=OPENROUTER_KEY,
    base_url="https://openrouter.ai/api/v1"
)
#–î–µ—Ñ–æ–ª—Ç –º–æ–¥–µ–ª—å
CURRENT_MODEL = "qwen/qwen3-235b-a22b:free"
AI_PARAMS = {
    "temperature": 0.1,
    "max_tokens": 4000,
    "top_p": 1.0,
    "frequency_penalty": 0.0,
    "presence_penalty": 0.0
}
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
SUPPORTED_FORMATS = ['.pdf', '.docx', '.txt']
MAX_FILE_SIZE = 20 * 1024 * 1024  # 20 –ú–ë

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

def promt_create_button():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùì –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="np")]
    ])


def get_models_keyboard():
    models = [
        "meta-llama/llama-4-maverick:free",
        "google/gemini-2.5-pro-exp-03-25:free",
        "deepseek/deepseek-chat-v3-0324:free",
        "qwen/qwen3-235b-a22b:free"  # –î–æ–±–∞–≤–∏–ª —Ç–µ–∫—É—â—É—é –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
    ]

    keyboard = []
    for model in models:
        short_name = model.split('/')[1].split(':')[0]
        keyboard.append([InlineKeyboardButton(text=f"{short_name}", callback_data=model)])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_params_button():
    params = AI_PARAMS.keys()

    keyboard = []
    for param in params:
        keyboard.append([InlineKeyboardButton(text=f"{param}", callback_data=param)])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)




@dp.message(CommandStart())
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await message.answer(
        f"üéì <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n\n"
        "–Ø –ø—Ä–æ–≤–µ—Ä—è—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
        "üìÑ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–æ–π!\n\n"
        "üìÅ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:</b> PDF, DOCX, TXT —Ñ–∞–π–ª—ã (–¥–æ 20 –ú–ë)\n"
        "ü§ñ <b>–ò—Å–ø–æ–ª—å–∑—É—é:</b> Claude 3.5 Sonnet\n\n",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("newmodel"))
async def select_model_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    await message.answer(
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: \n<pre><code>{CURRENT_MODEL}</code></pre>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_models_keyboard()
    )


@dp.message(Command("newparams"))
async def select_params_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    # –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
    params_text = "\n".join([f"‚Ä¢ <code>{key}</code> = <code>{value}</code>" for key, value in AI_PARAMS.items()])

    await message.answer(
        f"<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:</b>\n{params_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_params_button()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

@dp.message(ParamsUpdate.waiting_for_params)
async def process_new_param_value(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    global AI_PARAMS
    user_data = await state.get_data()
    param_name = user_data.get('param_to_update')
    new_value_str = message.text

    try:
        new_value = float(new_value_str)
        AI_PARAMS[param_name] = new_value
        await message.answer(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä <code>{param_name}</code> –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ <code>{new_value}</code>")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.7 –∏–ª–∏ 1024).")



@dp.message(Command("newprompt"))
async def create_newprompt(message: Message, state: FSMContext):  # –î–æ–±–∞–≤–ª—è–µ–º state
    user_data = await state.get_data()
    current_prompt = user_data.get('user_prompt', PROMPT_TEMPLATE)

    await message.answer(
        f"<b>–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:</b>\n<pre><code>{current_prompt}</code></pre>",
        reply_markup=promt_create_button()
    )




@dp.message(PromptUpdate.waiting_for_prompt)
async def process_new_prompt(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    new_prompt_text = message.text
    await state.update_data(user_prompt=new_prompt_text)
    await message.answer("‚úÖ –í–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await state.clear()


@dp.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await message.answer(
        "üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π\n"
        "2Ô∏è‚É£ –ñ–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç –ò–ò (1-2 –º–∏–Ω—É—Ç—ã)\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É\n\n"
        "<b>üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ PDF (–¥–æ 20 –ú–ë)\n"
        "‚Ä¢ DOCX (Microsoft Word)\n"
        "‚Ä¢ TXT (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã)\n\n"
        "<b>üìä –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è:</b>\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ —Ä–µ—à–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n" 
        "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–æ–≤\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
        "<b>üí° –†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –û—Ü–µ–Ω–∫–∞ –∏–∑ 100 –±–∞–ª–ª–æ–≤ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "help")
async def help_callback(callback):
    """–ü–æ–º–æ—â—å —á–µ—Ä–µ–∑ callback"""
    await help_command(callback.message)


@dp.callback_query(lambda c: ':free' in c.data)  # –õ–æ–≤–∏–º –≤—Å–µ callback'–∏, –≥–¥–µ –µ—Å—Ç—å ':free'
async def process_model_selection(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    global CURRENT_MODEL
    new_model = callback_query.data
    CURRENT_MODEL = new_model

    short_name = new_model.split('/')[1].split(':')[0]

    await callback_query.message.edit_text(
        f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:\n<pre><code>{short_name}</code></pre>"
    )
    await callback_query.answer()


@dp.callback_query(F.data == "np")
async def new_prompt_start(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
    await callback_query.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞.")
    await state.set_state(PromptUpdate.waiting_for_prompt)
    await callback_query.answer()


# –≠—Ç–æ—Ç callback –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
@dp.callback_query(F.data.in_(AI_PARAMS.keys()))
async def start_param_update(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    param_name = callback_query.data
    await state.update_data(param_to_update=param_name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –º–µ–Ω—è–µ–º

    await callback_query.message.answer(f"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <code>{param_name}</code>:")
    await state.set_state(ParamsUpdate.waiting_for_params)
    await callback_query.answer()





@dp.message(F.text & ~F.text.startswith('/'))
async def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "üìÑ <b>–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!</b>\n\n"
        "–Ø –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: PDF, DOCX, TXT",
        reply_markup=get_main_keyboard()
    )





@dp.message(F.document)
async def handle_document(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
    document = message.document
    file_name = document.file_name
    file_size = document.file_size
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if file_size > MAX_FILE_SIZE:
        await message.answer(
            f"‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!</b>\n\n"
            f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024 / 1024:.1f} –ú–ë\n"
            f"üìè –ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE / 1024 / 1024} –ú–ë\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —Å–∂–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    file_ext = Path(file_name).suffix.lower()
    if file_ext not in SUPPORTED_FORMATS:
        await message.answer(
            f"‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            f"üìÑ –¢–≤–æ–π —Ñ–∞–π–ª: <code>{file_ext}</code>\n"
            f"üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: <code>{', '.join(SUPPORTED_FORMATS)}</code>\n\n"
            f"–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Ñ–∞–π–ª –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status_msg = await message.answer(
        "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç—É...</b>\n\n"
        "üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª\n"
        "‚è≥ –ò–∑–≤–ª–µ–∫–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n"
        "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –ò–ò\n\n"
        "<i>–û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã</i>"
    )
    
    temp_path = None
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(document.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix=file_ext, delete=False) as tmp_file:
            await bot.download_file(file.file_path, tmp_file.name)
            temp_path = tmp_file.name
        
        await status_msg.edit_text(
            "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç—É...</b>\n\n"
            "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω\n"
            "üîÑ –ò–∑–≤–ª–µ–∫–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n"
            "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –ò–ò"
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if file_ext == '.txt':
            content = await extract_txt(temp_path)
        elif file_ext == '.docx':
            content = await extract_docx(temp_path)
        elif file_ext == '.pdf':
            content = await extract_pdf(temp_path)
        else:
            raise Exception("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if not content.strip():
            raise Exception("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
        
        await status_msg.edit_text(
            "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç—É...</b>\n\n"
            "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω\n"
            "‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ\n"
            "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –ò–ò\n\n"
            "<i>–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É...</i>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        result = await check_with_ai(content, state)
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if temp_path:
            os.unlink(temp_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        await status_msg.edit_text(
            "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìÑ <b>–§–∞–π–ª:</b> <code>{file_name}</code>\n"
            f"üìä <b>–†–∞–∑–º–µ—Ä:</b> {file_size / 1024:.1f} –ö–ë\n"
            f"üìù <b>–°–∏–º–≤–æ–ª–æ–≤:</b> {len(content):,}\n"
            f"ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> Claude 3.5 Sonnet"
        )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(result) > 4000:
            parts = [result[i:i+4000] for i in range(0, len(result), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    await message.answer(f"üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n{part}")
                else:
                    await message.answer(f"üìã <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({i+1}):</b>\n\n{part}")
        else:
            await message.answer(f"üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n{result}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª
        await message.answer(
            "üéâ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
            "–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ üìÑ",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if temp_path:
            try:
                os.unlink(temp_path)
            except:
                pass
        
        await status_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:</b>\n\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.",
            reply_markup=get_main_keyboard()
        )

async def check_with_ai(content: str, state: FSMContext) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ OpenRouter"""
    prompt = PROMPT_TEMPLATE + f"\n\n–°–û–î–ï–†–ñ–ò–ú–û–ï –†–ê–ë–û–¢–´:\n{content}"

    try:
        response = openrouter.chat.completions.create(
            model=CURRENT_MODEL,
            messages=[
                {"role": "user", "content": prompt}
            ],
            **AI_PARAMS
        )


        raw_content = response.choices[0].message.content
        cleaned_content = re.sub(r'<[^>]+>', '', raw_content).strip()
        return cleaned_content

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç...")
    print("üìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, TXT")
    print("ü§ñ –ò–ò –º–æ–¥–µ–ª—å: Claude 3.5 Sonnet")
    print("‚ö° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!")
    print("-" * 50)
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("\n –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())

